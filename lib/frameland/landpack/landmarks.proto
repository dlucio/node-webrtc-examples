syntax = "proto3";

package frameland;

import "image_processing.proto";

service HandDetection {
    // Detect and draw the hand annotations on the image
    rpc DetectAndDraw (HandsRequest) returns (HandsReply) {}

    // Get all hands detected
    rpc GetHands (HandsRequest) returns (HandsReply) {}
}

message HandsRequest {
    Image image = 1;
    float min_detection_confidence = 2;
    float min_tracking_confidence = 3;
}

message HandsReply {
    Image image = 1;
    Hands hands = 2;
}

// NOTE: This message comes from MediaPipe
// A rectangle with rotation in normalized coordinates. The values of box center
// location and size are within [0, 1].
message NormalizedRect {
    // Location of the center of the rectangle in image coordinates.
    // The (0.0, 0.0) point is at the (top, left) corner.
    float x_center = 1;
    float y_center = 2;
  
    // Size of the rectangle.
    float height = 3;
    float width = 4;
  
    // Rotation angle is clockwise in radians.
    float rotation = 5;
  
    // Optional unique id to help associate different NormalizedRects to each
    // other.
    int64 rect_id = 6;
}  

// Each landmark is composed of x, y and z. 
// - x and y are normalized to [0.0, 1.0] by the image width and height respectively. 
// - z represents the landmark depth with the depth at the wrist being the origin, 
//     and the smaller the value the closer the landmark is to the camera. 
//
// The magnitude of z uses roughly the same scale as x.
message Landmark {
    float x = 1;
    float y = 2;
    float z = 3;
}

// where each hand is composed of label, score, a list of 21 hand landmarks,
// a rect for the landmarks and a rect for the palm detected.
// - label is a string of value either "Left" or "Right". 
// - score is the estimated probability of the predicted handedness 
//   and is always greater than or equal to 0.5 
//   (and the opposite handedness has an estimated probability of 1 - score).
message Hand {
    string label = 1;
    float score = 2;
    repeated Landmark landmark = 3;
    NormalizedRect hand_rect = 4;
    NormalizedRect palm_rect = 5;
}

// Collection of detected/tracked hands
message Hands {
    repeated Hand hand = 1;
}
